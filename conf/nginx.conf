worker_processes 1;
events {
    worker_connections  128;
}

http {
  include mime.types;
  default_type application/octet-stream;
  sendfile on;
  keepalive_timeout 65;
  lua_code_cache on;
  lua_need_request_body on;
  gzip on;

  resolver 127.0.0.11 ipv6=off;
  real_ip_header X-Forwarded-For;
  real_ip_recursive on;

  lua_shared_dict discovery 1m;
  lua_shared_dict sessions 10m;
  lua_package_path '~/lua/?.lua;;';

    upstream upstream_1{
        server worker.internal.msd.net:80;
    }

  server {
    listen 8081;
    default_type plain/text;
    location / {
      content_by_lua '
        ngx.say("Hello ", ngx.req.get_headers()["X-USER"])
      ';
    }
  }

  server {
    listen 80;
    charset utf-8;
    default_type text/html;

    access_by_lua_block {
      local opts = {
        redirect_uri = "http://13.126.137.139:8005/",
        discovery = "http://13.126.137.139:9080/auth/realms/admin-console/.well-known/openid-configuration",
        client_id = "web-gateway-service",
        client_secret = "402aaa44-6827-4376-b71b-d895070884a5",
        ssl_verify = "no",
        accept_none_alg = false,
        accept_unsupported_alg = false,
        renew_access_token_on_expiry = true,
        access_token_expires_in = 3600,
        revoke_tokens_on_logout = true,
      }

      local res, err = require("resty.openidc").authenticate(opts)
      if err then
        ngx.status = 500
        ngx.say(err)
        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
      end

      ngx.req.set_header("X-USER", res.id_token.sub)
    }

    expires           0;
    add_header        Cache-Control private;
    location / {
         proxy_pass http://upstream_1;
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
      root   html;
    }
  }
}